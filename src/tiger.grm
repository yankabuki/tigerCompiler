
%{
#include <stdio.h>
#include "util.h"
#include "symbol.h" 
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}

%union {
	int pos;
	int ival;
	string sval;
	A_var var;
	A_exp exp;
	A_expList explist;
	A_ty type;
	A_field field;
	A_fieldList fieldlist;
	A_fundec fundec;
	A_fundecList fundeclist;
	A_dec dec;
	A_decList declist;
	A_efieldList efieldlist;
	A_namety nametype;
	A_nametyList typelist;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  ASSIGN
  ARRAY IF WHILE FOR TO LET IN END 
  BREAK NIL
  FUNCTION VAR TYPE 
  IMPORT PRIMITIVE

%right OF DO

%nonassoc THEN
%nonassoc ELSE
%nonassoc LIST

%left OR
%left AND

%type <exp> exp program op_exp if_exp block_exp array_exp for_exp while_exp call_exp assign_exp let_exp record_exp
%type <var> lvalue_exp
%type <explist> list_exp params_exp
%type <declist> decs_exp
%type <fundec> fundec_exp
%type <dec> dec_exp vardec_exp
%type <fundeclist> fundecs_exp 
%type <fieldlist> fields_exp
%type <type> type_exp
%type <nametype> typedec_exp
%type <typelist> typedecs_exp
%type <efieldlist> efields_exp 

%left UMINUS
%right ASSIGN

%nonassoc EQ NEQ LE LT GT GE
%left PLUS MINUS
%left TIMES DIVIDE

%start program

%%

program: exp	{absyn_root = $1;}

exp: ID				{$$ = A_VarExp(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)));}
	| INT			{$$ = A_IntExp(EM_tokPos, $1);}
	| STRING		{$$ = A_StringExp(EM_tokPos, $1);}
	| NIL			{$$ = A_NilExp(EM_tokPos);}
	| BREAK			{$$ = A_BreakExp(EM_tokPos);}
	| lvalue_exp	{$$ = A_VarExp(EM_tokPos, $1);}
	| op_exp		{$$ = $1;}
	| if_exp		{$$ = $1;}
	| for_exp		{$$ = $1;}
	| while_exp		{$$ = $1;}
	| block_exp		{$$ = $1;}
	| let_exp		{$$ = $1;}
	| array_exp		{$$ = $1;}
	| record_exp	{$$ = $1;}
	| call_exp		{$$ = $1;}
	| assign_exp	{$$ = $1;}

lvalue_exp: lvalue_exp DOT ID 		{$$ = A_FieldVar(EM_tokPos, $1, S_Symbol($3));}
	| ID DOT ID						{$$ = A_FieldVar(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)), S_Symbol($3));}
	| lvalue_exp LBRACK exp RBRACK	{$$ = A_SubscriptVar(EM_tokPos, $1, $3);}
	| ID LBRACK exp RBRACK			{$$ = A_SubscriptVar(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)), $3);}

op_exp: exp PLUS exp			{$$ = A_OpExp(EM_tokPos, A_plusOp, $1, $3);}
	| exp MINUS exp				{$$ = A_OpExp(EM_tokPos, A_minusOp, $1, $3);}
	| exp TIMES exp				{$$ = A_OpExp(EM_tokPos, A_timesOp, $1, $3);}
	| exp DIVIDE exp			{$$ = A_OpExp(EM_tokPos, A_divideOp, $1, $3);}
	| exp EQ exp				{$$ = A_OpExp(EM_tokPos, A_eqOp, $1, $3);}
	| exp NEQ exp				{$$ = A_OpExp(EM_tokPos, A_neqOp, $1, $3);}  
	| exp LT exp				{$$ = A_OpExp(EM_tokPos, A_ltOp, $1, $3);} 
	| exp LE exp				{$$ = A_OpExp(EM_tokPos, A_leOp, $1, $3);} 
	| exp GT exp				{$$ = A_OpExp(EM_tokPos, A_gtOp, $1, $3);} 
	| exp GE exp				{$$ = A_OpExp(EM_tokPos, A_geOp, $1, $3);}
	| exp AND exp				{$$ = A_IfExp(EM_tokPos, $1, $3, A_IntExp(EM_tokPos, 0));} 
	| exp OR exp				{$$ = A_IfExp(EM_tokPos, $1, A_IntExp(EM_tokPos, 1), $3);} 
	| MINUS exp %prec UMINUS	{$$ = A_OpExp(EM_tokPos, A_minusOp, A_IntExp(EM_tokPos, 0), $2);}

if_exp: IF exp THEN exp				{$$ = A_IfExp(EM_tokPos, $2, $4, NULL);}
	| IF exp THEN exp ELSE exp	{$$ = A_IfExp(EM_tokPos, $2, $4, $6);}

for_exp: FOR ID ASSIGN exp TO exp DO exp	{$$ = A_ForExp(EM_tokPos, S_Symbol($2), $4, $6, $8);}

while_exp: WHILE exp DO exp	{$$ = A_WhileExp(EM_tokPos, $2, $4);}

block_exp: LPAREN list_exp RPAREN	{$$ = A_SeqExp(EM_tokPos, $2);}

let_exp: LET decs_exp IN list_exp END	{$$ = A_LetExp(EM_tokPos, $2, A_SeqExp(EM_tokPos, $4));}
	| LET IN list_exp END	{$$ = A_LetExp(EM_tokPos, NULL, A_SeqExp(EM_tokPos, $3));}
array_exp: ID LBRACK exp RBRACK OF exp	{$$ = A_ArrayExp(EM_tokPos, S_Symbol($1), $3, $6);}

record_exp: ID LBRACE efields_exp RBRACE	{$$ = A_RecordExp(EM_tokPos, S_Symbol($1), $3);}

call_exp: ID LPAREN params_exp RPAREN	{$$ = A_CallExp(EM_tokPos, S_Symbol($1), $3);}

efields_exp: ID EQ exp							{$$ = A_EfieldList(A_Efield(S_Symbol($1), $3), NULL);}
	| ID EQ exp COMMA efields_exp %prec LIST	{$$ = A_EfieldList(A_Efield(S_Symbol($1), $3), $5);} 
	|											{$$ = NULL;}

decs_exp: dec_exp			{$$ = A_DecList($1, NULL);}        
	| dec_exp decs_exp		{$$ = A_DecList($1, $2);}

dec_exp: vardec_exp	{$$ = $1;}
	| fundecs_exp	{$$ = A_FunctionDec(EM_tokPos, $1);}
	| typedecs_exp	{$$ = A_TypeDec(EM_tokPos, $1);}

fundecs_exp: fundec_exp					{$$ = A_FundecList($1, NULL);}
	| fundec_exp fundecs_exp %prec LIST	{$$ = A_FundecList($1, $2);}

typedecs_exp: typedec_exp					{$$ = A_NametyList($1, NULL);}
	| typedec_exp typedecs_exp %prec LIST	{$$ = A_NametyList($1, $2);}

typedec_exp: TYPE ID EQ type_exp	{$$ = A_Namety(S_Symbol($2), $4);}
	| TYPE ID EQ ID					{$$ = A_Namety(S_Symbol($2), A_NameTy(EM_tokPos, S_Symbol($4)));}

type_exp: LBRACE fields_exp RBRACE	{$$ = A_RecordTy(EM_tokPos, $2);}
	| ARRAY OF ID					{$$ = A_ArrayTy(EM_tokPos, S_Symbol($3));}

fields_exp: ID COLON ID							{$$ = A_FieldList(A_Field(EM_tokPos, S_Symbol($1), S_Symbol($3)), NULL);}
	| ID COLON ID COMMA fields_exp %prec UMINUS	{$$ = A_FieldList(A_Field(EM_tokPos, S_Symbol($1), S_Symbol($3)), $5);}
	|											{$$ = NULL;}

vardec_exp: VAR ID ASSIGN exp		{$$ = A_VarDec(EM_tokPos, S_Symbol($2), NULL, $4);}
	| VAR ID COLON ID ASSIGN exp	{$$ = A_VarDec(EM_tokPos, S_Symbol($2), S_Symbol($4), $6);}

fundec_exp: FUNCTION ID LPAREN fields_exp RPAREN COLON ID EQ exp	{$$ = A_Fundec(EM_tokPos, S_Symbol($2), $4, S_Symbol($7), $9);}
	| FUNCTION ID LPAREN fields_exp RPAREN EQ exp					{$$ = A_Fundec(EM_tokPos, S_Symbol($2), $4, NULL, $7);}

list_exp: exp SEMICOLON list_exp	{$$ = A_ExpList($1, $3);}
	| exp							{$$ = A_ExpList($1, NULL);}
	|								{$$ = NULL;}

params_exp: exp COMMA params_exp		{$$ = A_ExpList($1, $3);}
	| exp							{$$ = A_ExpList($1, NULL);}
	|								{$$ = NULL;}

assign_exp: lvalue_exp ASSIGN exp	{$$ = A_AssignExp(EM_tokPos, $1, $3);}
	| ID ASSIGN exp	{$$ = A_AssignExp(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)), $3);}
